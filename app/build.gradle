import groovy.json.JsonSlurper

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'

android {
  buildToolsVersion '29.0.3'
  compileSdkVersion 29
  defaultConfig {

    def inputFile = new File("appcoins-services.json")
    def json = new JsonSlurper().parseText(inputFile.text)
    buildConfigField 'String', 'DEFAULT_OEM_ADDRESS', "\"" + json.oems.default_address + "\""
    buildConfigField 'String', 'DEFAULT_STORE_ADDRESS', "\"" + json.stores.default_address + "\""

    applicationId "com.appcoins.wallet"
    minSdkVersion 21
    targetSdkVersion 29
    versionCode 173
    versionName "1.16.3.0"
    testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    multiDexEnabled = true

    //room schemas location
    javaCompileOptions {
      annotationProcessorOptions {
        arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
      }
    }

    buildConfigField 'int', 'DB_VERSION', '5'
    buildConfigField 'int', 'BILLING_SUPPORTED_VERSION', project.BILLING_SUPPORTED_VERSION
    buildConfigField 'String', 'ROPSTEN_DEFAULT_TOKEN_SYMBOL', project.ROPSTEN_DEFAULT_TOKEN_SYMBOL
    buildConfigField 'String', 'ROPSTEN_DEFAULT_TOKEN_ADDRESS',
        project.ROPSTEN_DEFAULT_TOKEN_ADDRESS
    buildConfigField 'String', 'MAIN_NETWORK_DEFAULT_TOKEN_NAME',
        project.MAIN_NETWORK_DEFAULT_TOKEN_NAME
    buildConfigField 'int', 'ROPSTEN_DEFAULT_TOKEN_DECIMALS', project.ROPSTEN_DEFAULT_TOKEN_DECIMALS
    buildConfigField 'String', 'MAIN_NETWORK_DEFAULT_TOKEN_SYMBOL',
        project.MAIN_NETWORK_DEFAULT_TOKEN_SYMBOL
    buildConfigField 'String', 'MAIN_NETWORK_DEFAULT_TOKEN_ADDRESS',
        project.MAIN_NETWORK_DEFAULT_TOKEN_ADDRESS
    buildConfigField 'String', 'ROPSTEN_DEFAULT_TOKEN_NAME', project.ROPSTEN_DEFAULT_TOKEN_NAME
    buildConfigField 'int', 'MAIN_NETWORK_DEFAULT_TOKEN_DECIMALS',
        project.MAIN_NETWORK_DEFAULT_TOKEN_DECIMALS
    buildConfigField 'String', 'REGISTER_PROOF_GAS_LIMIT', project.REGISTER_PROOF_GAS_LIMIT
    buildConfigField 'String', 'PAYMENT_GAS_LIMIT', project.PAYMENT_GAS_LIMIT
    buildConfigField 'String', 'FLURRY_APK_KEY', project.FLURRY_APK_KEY
    buildConfigField 'String', 'PAYMENT_HOST_ROPSTEN_NETWORK', project.PAYMENT_HOST_DEV
    buildConfigField 'String', 'SECOND_PAYMENT_HOST', project.SECOND_PAYMENT_HOST
    buildConfigField 'String', 'TRANSACTION_DETAILS_HOST', project.TRANSACTION_DETAILS_HOST
    buildConfigField 'String', 'TRANSACTION_DETAILS_HOST_ROPSTEN',
        project.TRANSACTION_DETAILS_HOST_ROPSTEN
    buildConfigField 'String', 'RAKAM_BASE_HOST', project.RAKAM_BASE_HOST
    buildConfigField 'String', 'RAKAM_API_KEY', project.RAKAM_API_KEY
    resValue "string", "facebook_app_id", project.FACEBOOK_APP_KEY
    buildConfigField 'String', 'INFURA_API_KEY_MAIN', project.INFURA_API_KEY_MAIN
    buildConfigField 'String', 'INFURA_API_KEY_ROPSTEN', project.INFURA_API_KEY_ROPSTEN
    buildConfigField 'String', 'AMPLITUDE_API_KEY', project.AMPLITUDE_API_KEY
    manifestPlaceholders.facebookKey = "${project.FACEBOOK_APP_KEY}"
  }

  signingConfigs {
    release {
      storeFile = file(project.BDS_WALLET_STORE_FILE)
      storePassword = project.BDS_WALLET_STORE_PASSWORD
      keyAlias = project.BDS_WALLET_KEY_ALIAS
      keyPassword = project.BDS_WALLET_KEY_PASSWORD
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      signingConfig signingConfigs.release
      buildConfigField 'int', 'LEADING_ZEROS_ON_PROOF_OF_ATTENTION',
          project.LEADING_ZEROS_ON_PROOF_OF_ATTENTION_RELEASE
      buildConfigField 'String', 'BASE_HOST', project.BASE_HOST_PROD
      buildConfigField 'String', 'BACKEND_HOST', project.BACKEND_HOST_PROD
      buildConfigField 'String', 'BDS_BASE_HOST', project.BDS_BASE_HOST_PROD
      buildConfigField 'String', 'MY_APPCOINS_BASE_HOST', project.MY_APPCOINS_BASE_HOST
      buildConfigField 'String', 'PAYMENT_HOST', project.PAYMENT_HOST
      buildConfigField 'String', 'CATAPPULT_BASE_HOST', project.CATAPPULT_BASE_HOST_PROD
      buildConfigField 'String', 'APTOIDE_PKG_NAME', project.APTOIDE_PACKAGE_NAME
      buildConfigField 'String', 'INTERCOM_API_KEY', project.INTERCOM_API_KEY
      buildConfigField 'String', 'INTERCOM_APP_ID', project.INTERCOM_APP_ID
      buildConfigField 'String', 'ADYEN_PUBLIC_KEY', project.ADYEN_PUBLIC_KEY
      buildConfigField 'String', 'SENTRY_DSN_KEY', project.SENTRY_DSN_KEY
      manifestPlaceholders.paymentHost = "${project.MANIFEST_PAYMENT_HOST}"
      manifestPlaceholders.secondPaymentHost = "${project.MANIFEST_SECOND_PAYMENT_HOST}"
    }
    debug {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      applicationIdSuffix ".dev"
      versionNameSuffix ".dev"
      buildConfigField 'int', 'LEADING_ZEROS_ON_PROOF_OF_ATTENTION',
          project.LEADING_ZEROS_ON_PROOF_OF_ATTENTION_DEBUG
      buildConfigField 'String', 'BASE_HOST', project.BASE_HOST_DEV
      buildConfigField 'String', 'BACKEND_HOST', project.BACKEND_HOST_DEV
      buildConfigField 'String', 'BDS_BASE_HOST', project.BDS_BASE_HOST_DEV
      buildConfigField 'String', 'MY_APPCOINS_BASE_HOST', project.MY_APPCOINS_BASE_HOST_DEV
      buildConfigField 'String', 'CATAPPULT_BASE_HOST', project.CATAPPULT_BASE_HOST_DEV
      buildConfigField 'String', 'APTOIDE_PKG_NAME', project.APTOIDE_PACKAGE_NAME_DEV
      buildConfigField 'String', 'PAYMENT_HOST', project.PAYMENT_HOST_DEV
      buildConfigField 'String', 'SECOND_PAYMENT_HOST', project.PAYMENT_HOST_DEV
      buildConfigField 'String', 'INTERCOM_API_KEY', project.INTERCOM_API_KEY_DEV
      buildConfigField 'String', 'INTERCOM_APP_ID', project.INTERCOM_APP_ID_DEV
      buildConfigField 'String', 'ADYEN_PUBLIC_KEY', project.ADYEN_PUBLIC_KEY_DEV
      buildConfigField 'String', 'SENTRY_DSN_KEY', project.SENTRY_DSN_KEY_DEV
      manifestPlaceholders.paymentHost = "${project.MANIFEST_PAYMENT_HOST_DEV}"
      manifestPlaceholders.secondPaymentHost = "${project.MANIFEST_PAYMENT_HOST_DEV}"
      applicationVariants.all { variant -> renameArtifact(defaultConfig)
      }
    }
  }
  packagingOptions {
    exclude 'META-INF/NOTICE' // will not include NOTICE file
    exclude 'META-INF/LICENSE' // will not include LICENSE file
    // as noted by @Vishnuvathsan you may also need to include
    // variations on the file name. It depends on your dependencies.
    // Some other common variations on notice and license file names
    //exclude 'META-INF/notice'
    //exclude 'META-INF/notice.txt'
    //exclude 'META-INF/license'
    //exclude 'META-INF/license.txt'
  }
  lintOptions {
    abortOnError false
  }
  compileOptions {
    targetCompatibility 1.8
    sourceCompatibility 1.8
  }
}

dependencies {
  implementation fileTree(dir: 'libs', include: ['*.jar'])
  implementation project(":tn")
  implementation project(path: ':airdrop')
  implementation project(path: ':billing')
  implementation project(path: ':commons')
  implementation project(path: ':gamification')
  implementation project(path: ':permissions')
  implementation project(path: ':appcoinsRewards')

  implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

  implementation "androidx.appcompat:appcompat:$project.appcompat_version"
  implementation "androidx.vectordrawable:vectordrawable:$project.vector_drawable_version"
  implementation "androidx.recyclerview:recyclerview:$project.recyclerview_version"
  implementation "androidx.cardview:cardview:$project.cardview_version"
  implementation "androidx.constraintlayout:constraintlayout:$project.constraintlayout_version"
  implementation "androidx.palette:palette:$project.palette_version"
  implementation "androidx.preference:preference:$project.preference_version"
  implementation "androidx.multidex:multidex:$project.multidex_version"
  implementation "androidx.viewpager2:viewpager2:$project.viewpager_version"
  implementation "androidx.room:room-runtime:$project.room_version"
  implementation "androidx.room:room-rxjava2:$project.room_version"
  kapt "androidx.room:room-compiler:$project.room_version"

  implementation "android.arch.lifecycle:runtime:$project.lifecycle_version"
  implementation "android.arch.lifecycle:extensions:$project.lifecycle_version"

  implementation "com.squareup.retrofit2:retrofit:$project.retrofit_version"
  implementation "com.squareup.retrofit2:converter-gson:$project.retrofit_version"
  implementation "com.squareup.retrofit2:adapter-rxjava2:$project.retrofit_version"
  implementation "com.squareup.okhttp3:okhttp:$project.okhttp_version"
  implementation "com.google.code.gson:gson:$project.gson_version"

  implementation "com.google.android.material:material:$project.material_version"
  implementation "com.google.android.gms:play-services-vision:$project.play_services_vision_version"
  implementation "com.google.zxing:core:$project.zxing_version"
  implementation "com.journeyapps:zxing-android-embedded:$project.zxing_android_version"

  implementation "com.google.dagger:dagger:$project.dagger_version"
  kapt "com.google.dagger:dagger-android-processor:$project.dagger_version"
  kapt "com.google.dagger:dagger-compiler:$project.dagger_version"
  implementation "com.google.dagger:dagger-android-support:$project.dagger_version"

  implementation "io.reactivex.rxjava2:rxjava:$project.rxjava_version"
  implementation "io.reactivex.rxjava2:rxandroid:$project.rxandroid_version"
  implementation "com.jakewharton.rxbinding2:rxbinding:$project.rxbinding_version"
  // Rx Lifecycle
  implementation "com.trello:rxlifecycle:$project.rxlifecycle_version"
  // If you want pre-written Activities and Fragments you can subclass as providers
  implementation "com.trello:rxlifecycle-components:$project.rxlifecycle_version"

  implementation "com.adyen.checkout:card-ui:$project.adyen_version"
  implementation "com.adyen.checkout:redirect:$project.adyen_version"
  implementation "com.adyen.checkout:3ds2:$project.adyen_version"

  implementation "io.intercom.android:intercom-sdk:$project.intercom_version"

  implementation "io.rakam:android-sdk:$project.rakam_version"

  implementation "com.github.bumptech.glide:glide:$project.glide_version"
  kapt "com.github.bumptech.glide:compiler:$project.glide_version"

  implementation "com.flurry.android:analytics:$project.flurry_version"

  implementation "com.facebook.android:facebook-android-sdk:$project.facebook_sdk_version"
  implementation "aptoide-client-v8:aptoide-analytics-core:$project.aptoide_analytics_version"

  implementation "com.asfoundation:applications:$project.asf_applications_version"
  implementation "com.asfoundation:appcoins-contract-proxy:$project.asf_sdk_version"
  implementation "com.asfoundation:ethereumj-android:$project.ethereumj_sdk_version"

  implementation "com.google.firebase:firebase-messaging:$project.firebase_messaging"

  implementation "com.romandanylyk:pageindicatorview:$project.pageindicatorview_version"

  implementation "org.web3j:core:$project.web3j_version"

  implementation "com.github.walleth.kethereum:erc681:$project.erc681_version"

  implementation "com.airbnb.android:lottie:$project.lottie_version"

  implementation "com.hbb20:ccp:$project.cpp_version"

  implementation "com.hendraanggrian.material:collapsingtoolbarlayout-subtitle:$project.collapsingtoolbarlayout_version"

  implementation "io.sentry:sentry-android:$project.sentry_version"

  implementation "com.facebook.shimmer:shimmer:$project.shimmer_version"

  //Amplitude
  implementation "com.amplitude:android-sdk:$project.amplitude_version"

  implementation "androidx.biometric:biometric:$project.biometrics_version"

  testImplementation "junit:junit:$project.junit_version"
  testImplementation "org.mockito:mockito-core:$project.mockito_version"
  androidTestImplementation "androidx.test.ext:junit:$project.test_ext_version"
}

def renameArtifact(defaultConfig) {
  android.applicationVariants.all { variant ->
    variant.outputs.all {
      def SEP = "_"
      def buildType = variant.variantData.variantConfiguration.buildType.name
      def versionName = variant.versionName
      def versionCode = defaultConfig.versionCode
      def fileName =
          "AppCoins_Wallet_v" + versionName + SEP + versionCode + SEP + buildType + ".apk"
      outputFileName = new File("${fileName}")
    }
  }
}